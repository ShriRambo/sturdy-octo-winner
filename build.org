#+TITLE: Website Publishing: Build config
#+AUTHOR: shrirambo
#+DATE: 1st Feb, 2022
#+STARTUP: content

*  Emacs Build Configuration

** Save package in local =.packages= folder
This will set a local package initialisation directory so that packages are downloaded and saved locally and not in users or systems =.emacs.d= folder
#+BEGIN_SRC emacs-lisp :tangle ./build.el
  (require 'package)
  (setq package-user-dir (expand-file-name "./.packages"))
#+END_SRC
** Package archive path
This add package archives path, the location where package manager will search for the required packages.
#+BEGIN_SRC emacs-lisp :tangle ./build.el
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
#+END_SRC
** Initialize package system
#+BEGIN_SRC emacs-lisp :tangle ./build.el
  (package-initialize )
  (unless package-archive-contents
    (package-refresh-contents))
#+END_SRC
** Adding usepackage package
For nicer imports of packages
#+BEGIN_SRC emacs-lisp :tangle ./build.el
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC
** Raimbow delimiters
#+BEGIN_SRC emacs-lisp :tangle ./build.el
  (use-package rainbow-delimiters
    :ensure t
    :hook ((prog-mode . rainbow-delimiters-mode)
           (org-mode . rainbow-delimiters-mode)))
#+END_SRC
** No backups or temp files
#+BEGIN_SRC emacs-lisp :tangle ./build.el
  (setq make-backup-files nil)
#+END_SRC
** URL handeler mode to include external files
#+BEGIN_SRC emacs-lisp :tangle ./build.el
  (url-handler-mode 1)
#+END_SRC
** Install dependencies
#+BEGIN_SRC emacs-lisp :tangle ./build.el
 ; (use-package ox-slimhtml
  ;  :ensure t)
  (package-install 'htmlize)
#+END_SRC

** Load publishing system
#+BEGIN_SRC emacs-lisp :tangle ./build.el
  (require 'ox-publish)
#+END_SRC
** Customize HTML output
#+BEGIN_SRC emacs-lisp :tangle ./build.el
  ;; Customize the HTML output
  (setq org-html-validation-link nil            ;; Don't show validation link
        org-html-head-include-scripts nil       ;; Use our own scripts
        org-html-head-include-default-style nil ;; Use our own styles
        org-export-use-babel nil                ;; Do not use babel to execute src blocks
        org-html-htmlize-output-type 'css     ;; Instead of using inline css for each element
        org-export-with-todo-keywords nil       ;; Ignore TODO keywords
        org-html-doctype "html5"
        org-html-html5-fancy nil
        org-html-head "<link rel=\"stylesheet\" href=\"/css/simple.css\" />"
        )
#+END_SRC
** Publishing project properties
#+BEGIN_SRC emacs-lisp :tangle ./build.el
  ;; Define the publishing project
  (setq org-publish-project-alist
        (list
         (list "org-site:main"
               :recursive t
               :base-directory "./content"
               :base-extension "org"
               :exclude ".*\.\\(setup\\|draft\\)\.org"  ;; This ignores all the setup and draft files  
               :publishing-function 'org-html-publish-to-html
               :publishing-directory "./public"
               :with-author nil           ;; Don't include author name
               :with-creator nil            ;; Include Emacs and Org versions in footer
               :with-date nil
               :with-toc t                ;; Include a table of contents
               :section-numbers nil       ;; Don't include section numbers
               :time-stamp-file nil)))    ;; Don't include time stamp in file

#+END_SRC
** Generate Output
#+BEGIN_SRC emacs-lisp :tangle ./build.el
  ;; Generate the site output
  (org-publish-all t)
  (message "Build complete!")
#+END_SRC
* Build
First line evaluates thin org file and creates a =build.el= file which contains all the publishing configuration. The second line evaluates =build.el= file itself and publish the web pages. And the final line removes =build.el= file.

#+BEGIN_SRC shell :tangle no
  #!/bin/bash
  emacs -Q --batch --eval "(require 'org)" --eval '(org-babel-tangle-file "build.org")'
  emacs -Q --script build.el
  rm build.el
#+END_SRC
** TODO One step less
Make emacs evaluate =build.org= itself, rahter than tangling =build.el= first. This will remove one step from the deployment.

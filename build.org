#+TITLE: Website Publishing: Build config
#+AUTHOR: shrirambo
#+DATE: [2022-02-01]
#+STARTUP: content

*  Emacs Build Configuration

** Save package in local ~.packages~ folder
This will set a local package initialisation directory so that packages are downloaded and saved locally and not in users or systems =.emacs.d= folder
#+BEGIN_SRC emacs-lisp :tangle ./build.el
  (require 'package)
  (setq package-user-dir (expand-file-name "./.packages"))
#+END_SRC
** Package archive path
This add package archives path, the location where package manager will search for the required packages.
#+BEGIN_SRC emacs-lisp :tangle ./build.el
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
#+END_SRC
** Initialize package system
#+BEGIN_SRC emacs-lisp :tangle ./build.el
  (package-initialize )
  (unless package-archive-contents
    (package-refresh-contents))
#+END_SRC
** Adding usepackage package
For nicer imports of packages
#+BEGIN_SRC emacs-lisp :tangle ./build.el
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC
** Raimbow delimiters
#+BEGIN_SRC emacs-lisp :tangle ./build.el
  (use-package rainbow-delimiters
    :ensure t
    :hook ((prog-mode . rainbow-delimiters-mode)
           (org-mode . rainbow-delimiters-mode)))
#+END_SRC
** No backups or temp files
#+BEGIN_SRC emacs-lisp :tangle ./build.el
  (setq make-backup-files nil)
#+END_SRC
** URL handeler mode to include external files
#+BEGIN_SRC emacs-lisp :tangle ./build.el
  (url-handler-mode 1)
#+END_SRC
** Install dependencies
#+BEGIN_SRC emacs-lisp :tangle ./build.el
 ; (use-package ox-slimhtml
  ;  :ensure t)
  (package-install 'htmlize)
#+END_SRC

** Load publishing system
#+BEGIN_SRC emacs-lisp :tangle ./build.el
  (require 'ox-publish)
#+END_SRC

** Evaluate lisp code without confirmation
#+BEGIN_SRC emacs-lisp
(defun my-org-confirm-babel-evaluate (lang body)
  (not (member lang '("emacs-lisp" ))))
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+END_SRC
* Custom Backend 
** Markup alist
#+BEGIN_SRC emacs-lisp :tangle ./build.el
(assq-delete-all 'verbatim org-html-text-markup-alist)
(add-to-list 'org-html-text-markup-alist
	     '(verbatim . "<mark>%s</mark>"))
#+END_SRC

** Sitemap or Index page

A function to format the publication date as a string which will be shown below the entry on index page.

#+BEGIN_SRC emacs-lisp :tangle ./build.el
(defun sr/format-date-subtitle (file project)
  "Format publication date. Use (org-publish-find-property file :title project) to add other properties"
  (capitalize (format-time-string "%B %d, %Y" (org-publish-find-date file project))))	
#+END_SRC


Now I need a function that will format the sitemap/index page entries in a specified way.

#+BEGIN_SRC emacs-lisp :tangle ./build.el
(defun sr/org-publish-sitemap-entry (entry style project)
  "Format for sitemap ENTRY, as a string.
ENTRY is a file name.  STYLE is the style of the sitemap.
PROJECT is the current project."
  (unless (equal entry "404.org")
    (format "[[file:%s][%s]] \n /%s/"
            entry
            (org-publish-find-title entry project)
            (sr/format-date-subtitle entry project))))
#+END_SRC

And finally, a function to generate ~sitemap.org~ file.

#+BEGIN_SRC emacs-lisp :tangle ./build.el
(defun sr/org-publish-sitemap (title list)
  "Generate sitemap as a string, having TITLE.
LIST is an internal representation for the files to include, as
returned by `org-list-to-lisp'."
  (let ((filtered-list (cl-remove-if (lambda (x)
                                       (and (sequencep x) (null (car x))))
                                     list)))
    (concat "#+TITLE: " title "\n"
	    "#+OPTIONS: tex:t toc:nil\n"
            "#+META_TYPE: website\n"
            "#+DESCRIPTION: Personal Blog of Shriram Ashirgade\n"
            "\n#+ATTR_HTML: :class sitemap\n" 
            (org-list-to-org filtered-list)
	    )))
#+END_SRC

The above piece of code was borrowed from [[https://writepermission.com][writepermission.com]].

** TODO Derived backend
#+BEGIN_SRC emacs-lisp
(org-export-define-derived-backend 'shrirambo-site-html 'html
  :translate-alist '((headline . my-latex-headline-translator)
		     (template . my-latex-template)))
#+END_SRC

** *ambles

Function to retrieve template html

#+BEGIN_SRC emacs-lisp :tangle ./build.el
(defun sa/get-template (type)
  "Return the content for the pre/postamble of TYPE."
  `(("en" ,(with-temp-buffer
             (insert-file-contents (expand-file-name (format "%s.html" type) "resources/templates/"))
             (buffer-string)))))
#+END_SRC

* Publish
** Customize HTML output
#+BEGIN_SRC emacs-lisp :tangle ./build.el
  ;; Customize the HTML output
  (setq org-html-validation-link nil            ;; Don't show validation link
        org-html-head-include-scripts nil       ;; Use our own scripts
        org-html-head-include-default-style nil ;; Use our own styles
        org-export-use-babel t                ;; Do(not) use babel to execute src blocks
        org-html-htmlize-output-type 'css     ;; Instead of using inline css for each element
        org-export-with-todo-keywords nil       ;; Ignore TODO keywords
        org-html-doctype "html5"
        org-html-html5-fancy nil
        org-html-head (concat
		        "<link rel='stylesheet' href='./css/code.css' />\n"
		       "<link rel='stylesheet' href='./css/simple.css' />\n"
		       "<link rel='shortcut icon' href='./img/favicon.ico' type='image/x-icon' />\n"
		       "<link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/fork-awesome@1.2.0/css/fork-awesome.min.css' integrity='sha256-XoaMnoYC5TH6/+ihMEnospgm0J1PM/nioxbOUdnM8HY=' crossorigin='anonymous'>\n")
	org-html-self-link-headlines t
	org-html-container-element         "section"
	org-publish-timestamp-directory "./.timestamps/"
	)
#+END_SRC
** Publishing project properties
#+BEGIN_SRC emacs-lisp :tangle ./build.el
  ;; Define the publishing project
  (setq org-publish-project-alist
        (list
         (list "org-site:main"
               :recursive t
               :base-directory "./content"
               :base-extension "org"
               :exclude ".*\.\\(setup\\|draft\\)\.org"  ;; This ignores all the setup and draft files
               ;:exclude ".*\.org" ;; Exclude everything. Use this for local testing
               ;:include ["blog1.org" "blog2.org"]
               :publishing-function 'org-html-publish-to-html
               :publishing-directory "./public"
               :with-author nil           ;; Don't include author name
               :with-creator nil            ;; Include Emacs and Org versions in footer
               :with-date nil
               :with-toc t                ;; Include a table of contents
               :section-numbers nil       ;; Don't include section numbers
               :time-stamp-file nil ;; Don't include time stamp in file
	       :auto-sitemap t
               :sitemap-filename "index.org"
               :sitemap-style 'list
	       :sitemap-title "Blog Posts"
	       :sitemap-function  'sr/org-publish-sitemap  
               :sitemap-sort-files 'anti-chronologically
	       :sitemap-format-entry 'sr/org-publish-sitemap-entry
	       :html-postamble t
	       :html-postamble-format (sa/get-template 'postamble)
	       )))

#+END_SRC

** Generate Output
#+BEGIN_SRC emacs-lisp :tangle ./build.el
  ;; Generate the site output
  (org-publish-all t)
  (message "Build complete!")
#+END_SRC
* Build
First line evaluates thin org file and creates a ~build.el~ file which contains all the publishing configuration. The second line evaluates ~build.el~ file itself and publish the web pages. And the final line removes ~build.el~ file.

#+BEGIN_SRC shell :tangle no
  #!/bin/bash
  emacs -Q --batch --eval "(require 'org)" --eval '(org-babel-tangle-file "build.org")'
  emacs -Q --script build.el
  rm build.el
#+END_SRC
** TODO One step less
Make emacs evaluate ~build.org~ itself, rahter than tangling ~build.el~ first. This will remove one step from the deployment.

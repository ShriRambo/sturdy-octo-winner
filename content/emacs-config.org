#+TITLE: Emacs config in org mode
#+AUTHOR: Shriram Ashirgade
#+STARTUP: content  hidestars indent

* Package management
** Use [[https://melpa.org/#/][MELPA]] for package archive
Adding melpa package repository and initializint
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives 
                 '("melpa" . "https://melpa.org/packages/") t)
  ;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
  ;; and `package-pinned-packages`. Most users will not need or want to do this.
  ;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (package-initialize)
#+end_src
Note that you'll need to run ~M-x package-refresh-contents~ or ~M-x package-list-packages~ to ensure that Emacs has fetched the MELPA package list before you can install packages with M-x package-install or similar. Following does that automatically
#+BEGIN_SRC emacs-lisp
  (unless package-archive-contents
    (package-refresh-contents))
#+END_SRC
** Make sure that ~use-package~ is loaded
This downloads ~use-package~ package if not installed.
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src
* Theme
** VSCode dark theme
 #+BEGIN_SRC emacs-lisp
 (use-package vscode-dark-plus-theme
   :ensure t
   :config
   (load-theme 'vscode-dark-plus t))
 #+END_SRC
** Zenburn theme
 #+BEGIN_SRC emacs-lisp :tangle no
 (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
 (load-theme 'zenburn-theme t)
 #+END_SRC
** No background in terminal mode
   Do not use theme background in terminal mode
   So we can use classic terminal view
   #+BEGIN_SRC emacs-lisp
   ;; No background when in terminal mode (to use default terminal background )
   (defun on-after-init ()
     (unless (display-graphic-p (selected-frame))
       (set-face-background 'default "unspecified-bg" (selected-frame))))

   (add-hook 'window-setup-hook 'on-after-init)
   #+END_SRC
* Mode line
** Doom modeline
Description
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode))
#+END_SRC
* Basic UX settings
** Startup screen
Startup do not include help page
#+BEGIN_SRC emacs-lisp
;; Disable the splash screen (to enable it agin, replace the t with 0)
(setq inhibit-splash-screen 0)
#+END_SRC
** Neo tree side buffer
Using neotree to show current dir (Don't know how to use dired)
First config command adds neotree to startup hook so that it loads on startup
Second config command adds multiline mode to neotree so that long file names are shown by textwrap
#+BEGIN_SRC emacs-lisp
(use-package neotree
   :ensure t
   :config
   (add-hook 'emacs-startup-hook 'neotree)
   (add-hook 'neotree-mode-hook 'visual-line-mode))
#+END_SRC
** Fancy icons in GUI
Display fancy icons when in gui 
#+BEGIN_SRC emacs-lisp
(when (display-graphic-p)
  (require 'all-the-icons))
#+END_SRC
** Transient mark mode
Don't know what it is
#+BEGIN_SRC emacs-lisp
(transient-mark-mode 1)
#+END_SRC
** Which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
     :ensure t
     :init (which-key-mode)
     :config (setq which-key-idle-delay 0.7))
#+END_SRC
** Yes or no ==>  y or n
Instead of typing full *yes* or *no*, we just write *y* or *n*. Save some time for your girl.
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** No saving backups. We don't need them :D
#+BEGIN_SRC emacs-lisp
  (setq make-backup-file nil)
  (setq auto-save-default nil)
#+END_SRC
** Beacon mode 
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC
** TODO Camel Case (Make it only for prog mode)
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
** TODO Electric pairs
Not working porperly
#+BEGIN_SRC emacs-lisp :tangle no
  (setq electric-pair-pairs '(
                              (?\ . ?\))
                              (?\[ . ?\])
                              (?\" . ?\")
                              ))
  (electric-pair-mode t)
#+END_SRC
** Hungry delete 
To remove all lagging spaces all at once
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+END_SRC
** Sudo edit
Do I really need it?
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package sudo-edit
    :ensure t
    :bind ("s-e" . sudo-edit))
#+END_SRC
** Rainbo delimiters
Only for prog mode?
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook ((prog-mode . rainbow-delimiters-mode)
           (org-mode . rainbow-delimiters-mode)))
#+END_SRC
** Fancy killring
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
** Pretty characters mode
#+BEGIN_SRC emacs-lisp
  (when window-system
    (use-package pretty-mode
      :ensure t
      :config (global-pretty-mode 1)))
#+END_SRC 
** Open maximised
#+BEGIN_SRC emacs-lisp
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))
  (add-to-list 'default-frame-alist '(fullscreen . fullheight))
#+END_SRC
** Escape to quit prompt
Press ~ESC~ to quit the prompt
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC
** No menu bar, tool bar, and scroll bar
Removing tool bar on top. Let's be honest, who uses it. ...
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC
** CUA mode ( for copy paste )
Usual C-c C-v for copy paste
#+BEGIN_SRC emacs-lisp
;;; Auto CUA mode
(cua-mode t)
(setq cua-auto-tabify-rectangles nil) ;; Don't tabify after rectangle commands
(transient-mark-mode 1) ;; No region when it is not highlighted
(setq cua-keep-region-after-copy t) ;; Standard Windows behaviour
#+END_SRC
** Auto line number
To always have line numbers on the side

#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
  (line-number-mode 1)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(term-mode-hook
                  eshell-mode-hook
                  neotree-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

Showing relative line numbers
#+BEGIN_SRC emacs-lisp :tangle no
(setq display-line-numbers-type 'relative)
#+END_SRC
** Move custom files outside ~init.el~
   Move all ~custom-*~ stuff into ~custom.config.el~. Do not put them in ~init.el~.

#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/custom.conf.el")
(load-file custom-file)
#+end_src
** Text wrapping
Turn on [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Visual-Line-Mode.html][visual-line-moe]] for text and org files. This wraps words by word boundaries.

#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'visual-line-mode)
(add-hook 'org-mode 'visual-line-mode)
#+end_src
* Org mode
** Org bable
+ Org bable load languages
 #+BEGIN_SRC emacs-lisp
 (org-babel-do-load-languages
  'org-babel-load-languages
  '(
    (python . t)
    (shell . t)
    ))
 #+END_SRC

+  Org bable no confirmation for following languages
 #+BEGIN_SRC emacs-lisp
 (defun my-org-confirm-babel-evaluate (lang body)
   (not (member lang '("python" ))))
 (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
 #+END_SRC

+  Language specific commands
  -  Python command
     #+BEGIN_SRC emacs-lisp
     (setq org-babel-python-command "python3")
      #+END_SRC
** Org todo->done log time stamp
Log a timestamp when a TODO is changed to DONE state
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
#+END_SRC

And log it to a drawer
#+BEGIN_SRC emacs-lisp
  (setq org-log-into-drawer t)
#+END_SRC

** Org Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode))

  ; :custom (org-bullet-list '("" "" "" "" ))
  ;  :config
  ;  (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** Elipsis
The end of the heading character that will show that the heading is folded
#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis " ⤵")
#+END_SRC
Other interesting characters are ▼, ↴, ⬎, ⤷, and ⋱ 
** Leading stars and indentation
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t
        org-hide-leading-stars t)
#+END_SRC
** Hide emphasis markers
Hide the ~code~, /italics/ and *bold* _u+nderline_ =verbatim= +strike-through+
#+BEGIN_SRC emacs-lisp
  (setq org-hide-emphasis-markers t)
#+END_SRC 
** Pretty symbols
Show pretty symbols like \lambda instead of \ lambda
#+BEGIN_SRC emacs-lisp
  (setq org-pretty-entities t)
#+END_SRC
** TODO Custom faces for different headline level
These are having some issues with toto font size being too small so check it out
#+BEGIN_SRC emacs-lisp :tangle no
  (custom-theme-set-faces
       'user
      `(org-level-4 ((t ( :height 1.1   ))))
     `(org-level-3 ((t ( :height 1  ))))
    `(org-level-2 ((t ( :height 1.1   ))))
   `(org-level-1 ((t ( :height 1.25  ))))
   `(org-document-title ((t ( :height 1.5 :underline nil)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (dolist (face '((org-level-1 . 1.3)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :weight 'regular :height (cdr face)))

#+END_SRC
** Variable pitch mode ? Ye kya hai re bava?
#+BEGIN_SRC emacs-lisp
  ;(add-hook 'org-mode-hook 'variable-pitch-mode)
#+END_SRC
** Snippets
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
  (add-to-list 'org-structure-template-alist
               '("py" "#+BEGIN_SRC python\n?\n#+END_SRC"))
  (add-to-list 'org-structure-template-alist
               '("sh" "#+BEGIN_SRC shell\n?\n#+END_SRC"))
#+END_SRC

Org tempo can also be used. 

** Gen config
*** Src edit window no split
Do not split while editing ~src~ with ~C-c '~
#+BEGIN_SRC emacs-lisp :tangle no
  (setq org-src-window-setup 'current-window)
#+END_SRC
* Moving around
** Ido
I do this and I do that
~C-x C-f~ for using IDO to find file
#+BEGIN_SRC emacs-lisp :tangle no
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
For simply switching buffer
#+BEGIN_SRC emacs-lisp :tangle no
  (global-set-key (kbd "C-x b") 'ido-switch-buffer)
#+END_SRC
*** Verticle Ido
Seems nice. But this depends on Ido, so keep the Ido section
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
#+END_SRC
** Ibuffer
To enter Ibuffer (gives a bit detailed view) 
#+BEGIN_SRC emacs-lisp 
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
** Smex
For easy ~M-x~
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
** Ace jump mode
To jump around buffer/windows
#+BEGIN_SRC emacs-lisp
  (use-package ace-jump-mode
    :ensure t
    :bind
    ("M-s" . 'ace-jump-char-mode)
    ("C-x o" . 'ace-window))
#+END_SRC
** Split window improvement
This change willnot just split window but also follow to the new window.
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** Swiper for search
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . swiper))
#+END_SRC
** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
      :diminish
      :bind (("C-x b" . ivy-switch-buffer)
             :map ivy-minibuffer-map
             ("TAB" . ivy-alt-done)	
             ("C-l" . ivy-alt-done)
             ("C-j" . ivy-next-line)
             ("C-k" . ivy-previous-line)
             :map ivy-switch-buffer-map
             ("C-k" . ivy-previous-line)
             ("C-l" . ivy-done)
             ("C-d" . ivy-switch-buffer-kill)
             :map ivy-reverse-i-search-map
             ("C-k" . ivy-previous-line)
             ("C-d" . ivy-reverse-i-search-kill))

      :config
      (ivy-mode 1))
#+END_SRC
** Counsel for minibuffer help (comes with ivy)
#+BEGIN_SRC emacs-lisp 
  (use-package counsel
      :ensure t
      :bind (("M-x" . counsel-M-x)
             ("C-x f" . counsel-find-file)
             :map minibuffer-local-map
             ("C-r" . 'counsel-minibuffer-history))
      :config (setq ivy-initial-inputs-alist nil)
      )
#+END_SRC
*** TODO Remove initial ~^~ symbol when in ~M-x~ input 
*** TODO Helpful integration
** Ivy rich
Some helpful transformations for ~Ivy~ and ~Counsel~
#+BEGIN_SRC emacs-lisp
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1)
    :config
    (setq ivy-format-function #'ivy-format-function-line))
#+END_SRC
*** TODO Better formatting for ~switch buffer~ viwe.
** Helpful
#+BEGIN_SRC emacs-lisp
  (use-package helpful
     :custom
     (counsel-describe-function-function #'helpful-callable)
     (counsel-describe-variable-function #'helpful-variable)
     :bind 
     ([remap describe-function] .  counsel-describe-function)
     ([remap describe-symbol]  . helpful-symbol)
     ([remap describe-variable] . counsel-describe-variable)
     ([remap describe-command] .  helpful-command)
     ([remap describe-key] .  helpful-key))
#+END_SRC
* Others
** Rainbow
For generative work
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package rainbow-mode
    :ensure t
    :init (add-hook prog-mode-hook 'rainbow-mode))
#+END_SRC
* Custom functoins
** Kill word improvement
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "M-d") 'kill-whole-word)	     
#+END_SRC
* To do someday [0/9]
** TODO Autocomplete? Company? 
** TODO Yasnippets
** TODO Ivy Swyper(done) and Counsel for minibuffer
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package ivy
    :diminish
    :bind (("C-x b" . ivy-switch-buffer)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)	
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))

    :config
    (ivy-mode 1))
#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package counsel
      :ensure t
      :bind ("M-x" . counsel-M-x))

      :config ((setq counsel-describe-function-function #'helpful-callable)
              (setq counsel-describe-variable-function #'helpful-variable)))
#+END_SRC
** TODO Startup dashboard something    
** TODO Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC
** TODO Git changes in side gutter/fringes
** TODO [[https://github.com/DarthFennec/highlight-indent-guides][Indentation highlight]]
** TODO
* TODO  Using noweb to better organize config
* Apply changes
Copy the file to the required location
Go to the code below and press ~C-c~ and then confirm yes
#+BEGIN_SRC shell :results none
  cp config.org ~/.emacs.d/config.org
#+END_SRC

And reload the emacs config

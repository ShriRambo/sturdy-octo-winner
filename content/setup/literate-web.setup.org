#+NAME: literal-html
#+begin_src emacs-lisp :exports none :results html :var blk=""
(cadr (org-babel-lob--src-info blk) )
#+end_src

#+NAME: literal-js
#+BEGIN_SRC emacs-lisp :exports none :results html :var blk=""
(concat
 "<script type=\"text/javascript\">\n"
 (cadr (org-babel-lob--src-info blk))
 "\n"
 "</script>")
#+end_src

#+NAME: literal-css
#+BEGIN_SRC emacs-lisp :exports none :results html :var blk=""
(concat
 "<style>\n"
 (cadr (org-babel-lob--src-info blk))
 "\n"
 "</style>")
#+end_src

#+NAME: raw_export
#+BEGIN_SRC emacs-lisp :exports none :results html :var blk=""
(let
    ((lan (nth 0 (org-babel-lob--src-info blk) )) ;src block language
     (bod (cadr (org-babel-lob--src-info blk) ))) ;src block body

  (if (string= lan "html") ; export html verbatim
      bod
    (if (string= lan "js") ; export js wrapped in script tag
	(concat "<script type=\"text/javascript\">\n" bod "\n" "</script>")
      (if (string= lan "css") ; export css wrapped in style tag
	  (concat "<style>\n" bod "\n" "</style>")))))
#+END_SRC

#+NAME: color_contrast
#+BEGIN_SRC emacs-lisp  :exports none
(defun get-contrast-yiq (hexcolor)
  "Return the contrast color (black or white) based on the given HEX color code."
  (let* ((r (string-to-number (substring hexcolor 1 3) 16))
         (g (string-to-number (substring hexcolor 3 5) 16))
         (b (string-to-number (substring hexcolor 5 7) 16))
         (yiq (/ (+ (* r 299) (* g 587) (* b 114)) 1000)))
    (if (>= yiq 128) "#000000" "#ffffff")))
;#+CALL: color_contrast[:results none]()
#+END_SRC


#+NAME: color_span
#+begin_src emacs-lisp :exports none :results html :var hexcolor="#000000"
(concat 
"<span class='color-mark' style='background:"
 hexcolor
 "; color:"
(let* ((r (string-to-number (substring hexcolor 1 3) 16))
         (g (string-to-number (substring hexcolor 3 5) 16))
         (b (string-to-number (substring hexcolor 5 7) 16))
         (yiq (/ (+ (* r 299) (* g 587) (* b 114)) 1000)))
    (if (>= yiq 128) "#000000" "#ffffff"))
 "'>"
 hexcolor
 "</span>"
 )
#+end_src
